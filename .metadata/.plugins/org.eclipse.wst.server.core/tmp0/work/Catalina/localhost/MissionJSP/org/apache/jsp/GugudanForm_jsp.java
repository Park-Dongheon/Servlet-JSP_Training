/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.24
 * Generated at: 2024-06-14 00:10:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class GugudanForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>구구단 폼</title>\r\n");
      out.write("<style>\r\n");
      out.write("	/* CSS 스타일 설정 */\r\n");
      out.write("    form {\r\n");
      out.write("    	/* 폼 요소들을 수직으로 배치하기 위해 flex 방향을 column으로 설정 */\r\n");
      out.write("        display: flex;\r\n");
      out.write("        flex-direction: column;\r\n");
      out.write("    }\r\n");
      out.write("    .form-group {\r\n");
      out.write("    	/* 폼 그룹 사이의 간격 설정 */\r\n");
      out.write("        margin-bottom: 10px;\r\n");
      out.write("    }\r\n");
      out.write("    #selBtn {\r\n");
      out.write("    	/* 선택 버튼의 기본 너비 설정 */\r\n");
      out.write("        width: 50px;\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("	//JavaScript 함수 정의\r\n");
      out.write("    function toggleRadio(radioGroup) {\r\n");
      out.write("        let radios = document.getElementsByName(radioGroup);	// 라디오 버튼 그룹을 가져옴\r\n");
      out.write("        for (let i = 0; i < radios.length; i++) {				// 각 라디오 버튼에 대해 반복\r\n");
      out.write("            radios[i].onclick = function() {					// 클릭 이벤트 핸들러 설정\r\n");
      out.write("                if (this.wasClicked) {							// 이미 클릭된 상태라면\r\n");
      out.write("                    this.checked = false;						// 체크 해제\r\n");
      out.write("                }\r\n");
      out.write("                this.wasClicked = this.checked;					// 클릭 여부 상태 업데이트\r\n");
      out.write("            };\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    window.onload = function() {		// 페이지 로드 시\r\n");
      out.write("        toggleRadio('orientation');		// 'orientation' 라디오 그룹에 대해 toggleRadio 함수 호출\r\n");
      out.write("        toggleRadio('Gugudan');			// 'Gugudan' 라디오 그룹에 대해 toggleRadio 함수 호출\r\n");
      out.write("    };\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<!-- 폼 시작 -->\r\n");
      out.write("	<form action=\"GugudanProc.jsp\" method=\"get\">\r\n");
      out.write("		<div class=\"form-group\">\r\n");
      out.write("			<!-- 'Type1' 라디오 버튼과 함께 숫자 입력란 -->\r\n");
      out.write("			<input type=\"radio\" id=\"Type1\" name=\"Gugudan\" value=\"Type1\" />\r\n");
      out.write("			<label for=\"Type1\">Type1</label>\r\n");
      out.write("			<input type=\"number\" id=\"dan\" name=\"dan\"/>\r\n");
      out.write("			단\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"form-group\">\r\n");
      out.write("			<!-- 'Type2' 라디오 버튼과 방향 선택을 위한 라디오 버튼들 -->\r\n");
      out.write("            <input type=\"radio\" id=\"Type2\" name=\"Gugudan\" value=\"Type2\" />\r\n");
      out.write("            <label for=\"Type2\">Type2</label>\r\n");
      out.write("            <input type=\"radio\" id=\"hol\" name=\"dir\" value=\"hor\" />\r\n");
      out.write("            <label for=\"hol\">Horizontal</label>\r\n");
      out.write("            <input type=\"radio\" id=\"ver\" name=\"dir\" value=\"ver\" />\r\n");
      out.write("            <label for=\"ver\">Vertical</label>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"form-group\">\r\n");
      out.write("			<!-- 'Type3' 라디오 버튼과 열 개수를 입력하는 숫자 입력란 -->\r\n");
      out.write("            <input type=\"radio\" id=\"Type3\" name=\"Gugudan\" value=\"Type3\" />\r\n");
      out.write("            <label for=\"Type3\">Type3</label>\r\n");
      out.write("            <input type=\"number\" id=\"col\" name=\"col\" />\r\n");
      out.write("			열\r\n");
      out.write("		</div>\r\n");
      out.write("		<!-- 선택 버튼 -->\r\n");
      out.write("		<input type=\"submit\" id=\"selBtn\" value=\"선택\" />\r\n");
      out.write("	</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
