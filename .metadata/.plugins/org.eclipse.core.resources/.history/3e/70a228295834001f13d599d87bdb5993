package model2.mvcboard;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import common.JDBConnect;
import model1.board.BoardDTO;

public class MVCBoardDAO extends JDBConnect {

	
	public MVCBoardDAO() {
		super();
	}

	// 검색 조건에 맞는 게시물의 개수를 반환합니다.
	public int selectCount(Map<String, Object> map) {
		int totalCount = 0;		// 결과(게시물 수) 를 담을 변수
		
		// 게시물 수를 얻어오는 쿼리문 작성
		String query = " SELECT COUNT(*) FROM mvcboard ";
		
		if (map.get("searchWord") != null) {
			query += " WHERE " + map.get("searchField") + " "
				   + " LIKE '%" + map.get("searchWord") + "%' ";
		}
		Statement st = null;
		ResultSet rs = null;
		
		try {
			st = getConnection().createStatement();		// 쿼리문 생성
			rs = st.executeQuery(query);					// 쿼리 실행
			rs.next();										// 커서를 첫 번째 행으로 이동
			totalCount = rs.getInt(1);						// 첫 번째 컬럼 값을 가져옴
			
		} catch (Exception e) {
			System.out.println("게시물 수를 구하는 중 예외 발생");
			e.printStackTrace();
		} finally {
			try {
				rs.close();
				st.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}		
		}
		
		return totalCount;
	}
	
	// 검색 조건에 맞는 게시물 목록을 반환합니다(페이징 기능 지원).
	public List<MVCBoardDTO> selectListPage(Map<String, Object> map) {
		List<MVCBoardDTO> board = new Vector<MVCBoardDTO>();		// 결과(게시물 목록)를 담을 변수
		
		// 쿼리문 템플릿
		String query = " SELECT * FROM mvcboard ";

		
		// 검색 조건이 있다면 WHERE절로 추가
		if (map.get("searchWord") != null) {
			query += " WHERE " + map.get("searchField")
				   + " LIKE '%" + map.get("searchWord") + "%' ";
		}
		
		query += " ORDER BY idx DESC LIMIT ?, ?";
		
		PreparedStatement psmt = null;
		ResultSet rs = null;
		
		try {
			// 쿼리문 완성
			psmt = getConnection().prepareStatement(query);		// 동적 쿼리문 생성
			psmt.setInt(1, (int)map.get("start"));				// 인파라미터 설정
			psmt.setInt(2, (int)map.get("pageSize"));
			
			// 쿼리문 실행
			rs = psmt.executeQuery();
			
			// 반환된 게시물 목록을 List 컬렉션에 추가
			while (rs.next()) {
				// 한 행(게시물 하나)의 데이터를 DTO에 저장
				MVCBoardDTO dto = new MVCBoardDTO();
				
				dto.setIdx(rs.getString(1));
				dto.setName(rs.getString(2));
				dto.setTitle(rs.getString(3));
				dto.setContent(rs.getString(4));
				dto.setPostdate(rs.getDate(5));
				dto.setOfile(rs.getString(6));
				dto.setSfile(rs.getString(7));
				dto.setDowncount(rs.getInt(8));
				dto.setPass(rs.getString(9));
				dto.setVisitcount(rs.getInt(10));
				
				
				// 반환할 결과 목록에 게시물 추가
				board.add(dto);
			}
		} catch (Exception e) {
			System.out.println("게시물 조회 중 예외 발생");
			e.printStackTrace();
		} finally {
			try {
				rs.close();
				psmt.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		// 목록 반환
		return board;
	}
	
	// 게시글 데이터를 받아 DB에 추가합니다.
	public int insertWrite(MVCBoardDTO dto) {
		int result = 0;
		
		PreparedStatement psmt = null;
		
		try {
			// INSERT 쿼리문 작성
			String query = "INSERT INTO mvcboard ( "
						 + " idx, name, title, content, ofile, sfile, pass) "
						 + " VALUES ( "
						 + " ?, ?, ?, ?, ?, ?)";
			
			psmt = getConnection().prepareStatement(query);	// 동적 쿼리
			psmt.setString(1, dto.getName());
			psmt.setString(2, dto.getContent());

			
			result = psmt.executeUpdate();
		} catch (Exception e) {
			System.out.println("게시물 입력 중 예외 발생");
			e.printStackTrace();
		} finally {
			try {
				psmt.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		return result;
	}
	
}
